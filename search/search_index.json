{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"git-log-analysis Getting and sorting the git commit frequency by files.","title":"Start"},{"location":"#git-log-analysis","text":"Getting and sorting the git commit frequency by files.","title":"git-log-analysis"},{"location":"api/","text":"References method : get_git_log_result Main method for git log analyzer Parameters: Name Type Description Default root_path str Root path for repository(project) required after str To get data after \"20xx-xx-xx\". Defaults to None. ex) 2022-07-10 None before str To get data before \"20xx-xx-xx\". Defaults to None. ex) 2022-09-10 None allowed_extensions list To allow specific extensions. Defaults to None. ex) py java c None Returns: Type Description dict Commit counts by files Source code in git_log_analysis/git_log_analyzer.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_git_log_result ( root_path : str , after : str = None , before : str = None , allowed_extensions : list = None ): \"\"\"Main method for git log analyzer Args: root_path (str): Root path for repository(project) after (str, optional): To get data after \"20xx-xx-xx\". Defaults to None. ex) 2022-07-10 before (str, optional): To get data before \"20xx-xx-xx\". Defaults to None. ex) 2022-09-10 allowed_extensions (list, optional): To allow specific extensions. Defaults to None. ex) py java c Returns: (dict): Commit counts by files \"\"\" try : after_option = f \"--after= { after } \" if after else \"\" before_option = f \"--after= { before } \" if before else \"\" command = f 'git log --name-status { after_option } { before_option } --pretty=format: | grep \".\"' process = subprocess . run ([ command ], text = True , shell = True , check = False , cwd = root_path , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) result = process . stdout . splitlines () commit_counts_by_files = get_count_by_files ( result ) real_files = traversing_dir_for_file ( root_path , allowed_extensions ) real_files = ' \\t ' . join ( real_files . copy ()) for file_name in commit_counts_by_files . copy (): if file_name not in real_files : del commit_counts_by_files [ file_name ] commit_counts_by_files = dict ( sorted ( commit_counts_by_files . items (), key = lambda item : item [ 1 ], reverse = True )) return commit_counts_by_files except subprocess . CalledProcessError : return {}","title":"API"},{"location":"api/#references","text":"","title":"References"},{"location":"api/#method-get_git_log_result","text":"Main method for git log analyzer Parameters: Name Type Description Default root_path str Root path for repository(project) required after str To get data after \"20xx-xx-xx\". Defaults to None. ex) 2022-07-10 None before str To get data before \"20xx-xx-xx\". Defaults to None. ex) 2022-09-10 None allowed_extensions list To allow specific extensions. Defaults to None. ex) py java c None Returns: Type Description dict Commit counts by files Source code in git_log_analysis/git_log_analyzer.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_git_log_result ( root_path : str , after : str = None , before : str = None , allowed_extensions : list = None ): \"\"\"Main method for git log analyzer Args: root_path (str): Root path for repository(project) after (str, optional): To get data after \"20xx-xx-xx\". Defaults to None. ex) 2022-07-10 before (str, optional): To get data before \"20xx-xx-xx\". Defaults to None. ex) 2022-09-10 allowed_extensions (list, optional): To allow specific extensions. Defaults to None. ex) py java c Returns: (dict): Commit counts by files \"\"\" try : after_option = f \"--after= { after } \" if after else \"\" before_option = f \"--after= { before } \" if before else \"\" command = f 'git log --name-status { after_option } { before_option } --pretty=format: | grep \".\"' process = subprocess . run ([ command ], text = True , shell = True , check = False , cwd = root_path , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) result = process . stdout . splitlines () commit_counts_by_files = get_count_by_files ( result ) real_files = traversing_dir_for_file ( root_path , allowed_extensions ) real_files = ' \\t ' . join ( real_files . copy ()) for file_name in commit_counts_by_files . copy (): if file_name not in real_files : del commit_counts_by_files [ file_name ] commit_counts_by_files = dict ( sorted ( commit_counts_by_files . items (), key = lambda item : item [ 1 ], reverse = True )) return commit_counts_by_files except subprocess . CalledProcessError : return {}","title":"method : get_git_log_result"}]}